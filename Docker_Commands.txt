https://docker-curriculum.com/

may be sudo for Ubuntu

#hello-world
docker run hello-world

#run ubuntu bash
docker run -it ubuntu bash

#The pull command fetches the busybox image 
docker pull busybox

#Run BusyBox shell
docker run -it --rm busybox
#examples:
docker run busybox printf "%s\n" echo -e "\xaa"

#to see a list of all images on your system.
docker images

#The docker ps command shows you all containers that are currently running.
docker ps

docker container ls

#list of all containers that we ran.
docker ps -a

#run busybox bash
docker run -it  busybox sh  --- output:
bash-command:/ # ls -l
bin   dev   etc   home  proc  root  sys   tmp   usr   var

bash-command:/ # uptime
14:39:30 up 17:20,  0 users,  load average: 0.01, 0.04, 0.03

Danger Zone: If you're feeling particularly adventurous you can try rm -rf bin in the container. 
Make sure you run this command in the container and not in your laptop/desktop. 
Doing this will not make any other commands like ls, echo work. 
Once everything stops working, you can exit the container (type exit and press Enter) 
and then start it up again with the docker run -it busybox sh command. 
Since Docker creates a new container every time, everything should start working again.

#use docker run --help
docker run --help

#Dopo usati i contenitori bisogna eliminarli:
docker ps -a (per elencarli)

#per eliminarli uno a uno:
docker rm b654588613df e744045b1a00 e744045b1a00

#per eliminarli tutti insieme:
docker rm $(docker ps -a -q -f status=exited)

#ultima versioni di coker:
docker container prune

Terminology:
Images - The blueprints of our application which form the basis of containers. In the demo above, we used the docker pull command to download the busybox image.

	Containers - Created from Docker images and run the actual application. We create a container using docker run which we did using the busybox image that we downloaded. A list of running containers can be seen using the docker ps command.

	Docker Daemon - The background service running on the host that manages building, running and distributing Docker containers. The daemon is the process that runs in the operating system to which clients talk to.

	Docker Client - The command line tool that allows the user to interact with the daemon. More generally, there can be other forms of clients too - such as Kitematic which provide a GUI to the users.

	Docker Hub - A registry of Docker images. You can think of the registry as a directory of all available Docker images. If required, one can host their own Docker registries and can use them for pulling images.

An important distinction to be aware of when it comes to images is the difference between base and child images.

	Base images are images that have no parent image, usually images with an OS like ubuntu, busybox or debian.

	Child images are images that build on base images and add additional functionality.
	
Then there are official and user images, which can be both base and child images.

	Official images: are images that are officially maintained and supported by the folks at Docker. These are typically one word long. In the list of images above, the python, ubuntu, busybox and hello-world images are official images.

	User images: are images created and shared by users like you and me. They build on base images and add additional functionality. Typically, these are formatted as user/image-name.	


#--rm toglie quando esiste gi√†
docker run --rm prakhar1989/static-site

#to stop the container.
Ctrl+C 

#-d will detach our terminal, -P will publish all exposed ports to random ports and finally --name corresponds to a name we want to give.
docker run -d -P --name static-site prakhar1989/static-site

#Specify a custom port
docker run -p 8888:80 prakhar1989/static-site

#Now we can see the ports by running the docker port [CONTAINER] command
docker port static-site

#To stop a detached containers
docker stop static-site

Dockerfile
_______________________________________________________________________________________________________________________________________________A Dockerfile is a simple text file that contains a list of commands that the Docker client calls while creating an image. 
It's a simple way to automate the image creation

https://docker-curriculum.com/#webapps-with-docker
Docker Network

#Exploration of networking
docker network ls

NETWORK ID          NAME                DRIVER              SCOPE
c2c695315b3a        bridge              bridge              local
a875bec5d6fd        host                host                local
ead0e804a67b        none                null                local

#The bridge network is the network in which containers are run by default. 
#To validate this, let's inspect the network.
docker network inspect bridge

...etc
"Containers": {
           "277451c15ec183dd939e80298ea4bcf55050328a39b04124b387d668e3ed3943": {
                "Name": "es",
                "EndpointID": "5c417a2fc6b13d8ec97b76bbd54aaf3ee2d48f328c3f7279ee335174fbb4d6bb",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            }
...etc

You can see that our container 277451c15ec1 is listed under the Containers section in the output. What we also see is the IP address this container has been allotted - 172.17.0.2. Is this the IP address that we're looking for? Let's find out by running our flask container and trying to access this IP.
277451c15ec1

$ docker run -it --rm prakhar1989/foodtrucks-web bash
root@35180ccc206a:/opt/flask-app# curl 172.17.0.2:9200


