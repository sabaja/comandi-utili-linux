I've done the below test during an interview for a Company (the test is in [Codility platform][1] ):

> You are a programmer in a scientific team doing resarch into particles. As an experiment, you have measured the position of a single particle in N equally distributed moments of time. The measurement made in moment k is recorded in array A as A[K].
Now, your job is to count all the periods of time when the movement of the partivle doesn't change its velocity: i.e. the difference between any two consecutive position measurements remains in the same. Note that you need at least three measurements to be sure that particle didn't change its velocity.
For example:

     1,  3,  5,  7,  9   is stable (velocity is 2)
     7,  7,  7,  7   is stable (particle stays in place)
     3, -1, -5, -9   is stable (velocity is -4)
             0,  1   is not stable (you need at least three measurements)   1,  1,  2,  5,  7   is not stable (velocity changes between measurements)

> More formaly, your task is to find all the periods of time A[P], A[P+1],..., A[Q] of(length at least 3) during which the movement of the particle is stable. Note that some periods of time might be contained in others (see example test).
Write a function:

    class Solution { public int solution(int[] A);
    }

> That, given array A consisting of N integers representing the results of the measurements, returns the number of periods of the time when the movement of the particle was stable. The function should return -1 if the result exceeds 1,000,000,000.
Examples:
> Given array A = [ -1, 1, 3, 3, 3, 2, 3, 2, 1, 0 ] the function should return 5, because there are five periods during which the movement of the particle is stable, namely:
(0,2),(2,4),(6,9),(6,8) and (7,9). Note that the last two periods are contened by (6,9):[Graphic-Periods][2]

> Given A = [2,2, ..., 2] of length 10,000 the function should return 49985001.

So this test wasn't end

  [1]: https://www.codility.com/
  [2]: https://i.stack.imgur.com/2Uw5T.jpg